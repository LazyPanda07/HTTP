name: CI

on:
  push:
    branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL, ProductionRelease, ProductionReleaseDLL]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@main
      
    - name: Build
      run: msbuild /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 HTTP.sln

    - name: Copy JSON to HTTP
      run: Copy-Item -Path .\bin\${{ matrix.configuration }}-x64\JSON\* -Destination .\bin\${{ matrix.configuration }}-x64\HTTP\ -Force

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: bin/${{ matrix.configuration }}-x64/HTTP


  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [ON, OFF]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup artifact name
      if: ${{ matrix.shared == 'ON' }}
      run: echo "APPEND_NAME=DLL" >> ${GITHUB_ENV}
        
    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DBUILD_SHARED_LIBS=${{ matrix.shared }} -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ env.APPEND_NAME }}_Linux
        path: build/bin

  
  windows-tests:
    needs: [windows-build]
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL, ProductionRelease, ProductionReleaseDLL]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@main

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: HTTP

    - name: Setup build type
      shell: pwsh
      run: echo "BUILD_TYPE=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

    - name: Get Google Tests
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest
        build-type: ${{ env.BUILD_TYPE }}

    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake ..
          msbuild /p:Configuration=${{ env.BUILD_TYPE }} /p:Platform=x64 INSTALL.vcxproj

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          .\Tests.exe


  linux-tests:
    needs: [linux-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [ON, OFF]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup artifact name
      if: ${{ matrix.shared == 'ON' }}
      run: echo "APPEND_NAME=DLL" >> ${GITHUB_ENV}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ env.APPEND_NAME }}_Linux
        path: HTTP

    - name: Get Google Tests
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest

    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
        cd build/bin
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
        ./Tests


  memory-leak-tests:
    needs: [linux-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [ON, OFF]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup artifact name
      if: ${{ matrix.shared == 'ON' }}
      run: echo "APPEND_NAME=DLL" >> ${GITHUB_ENV}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ env.APPEND_NAME }}_Linux
        path: HTTP

    - name: Get Google Tests
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest

    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Memory leak test
      uses: LazyPanda07/check-memory-leaks@v1
      with:
        path: Tests/build/bin
        name: Tests
        pre-execute: export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)


  publish:
    needs: [windows-tests, linux-tests, memory-leak-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\src\HTTPUtility.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux ReleaseDLL_Linux

    - name: Publish Windows
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: windows.zip

    - name: Publish Linux
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: linux.zip
        